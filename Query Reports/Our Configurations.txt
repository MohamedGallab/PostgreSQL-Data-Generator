1 - disabled all indicies without deleting them
    update pg_index set indisvalid = false where indexrelid = 'test_pkey'::regclass

    Schema 1:
        update pg_index set indisvalid = false where indexrelid = 'classroom_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'course_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'department_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'instructor_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'pre_requiste_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'section_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'section_time_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'student_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'takes_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'time_slot_pkey'::regclass;

    Schema 2:
        update pg_index set indisvalid = false where indexrelid = 'department_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'dependent_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'dept_locations_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'project_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'works_on_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'employee_pkey'::regclass; 

    Schema 3:
        update pg_index set indisvalid = false where indexrelid = 'boat_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'reserves_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'sailors_pkey'::regclass;

    Schema 4:
        update pg_index set indisvalid = false where indexrelid = 'actor_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'director_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'genres_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'movie_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'movie_cast_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'movie_direction_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'movie_genres_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'rating_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'reviewer_pkey'::regclass;

2 - use materialized view when needed

    Schema 1:
        CREATE MATERIALIZED VIEW sectionJoinTakes as
        select s.*, student_id, grade
        from takes t inner join section s on t.section_id = s.section_id
        where semester = 1 and year = 2019

        select *
            from
                (
                select *
                from student
                where 
                department = 'CSEN'
                ) as CS1_student
            full outer join
                (
                select *
                from sectionJoinTakes
                ) as sem1_student 
            on CS1_student.id = sem1_student.student_id;

    Schema 2:
        create MATERIALIZED VIEW q5 as
        select distinct e.*
        from employee e, dependent d
        where ssn=essn;

        select * from q5;