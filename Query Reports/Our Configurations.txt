1 - disabled all indicies without deleting them
    update pg_index set indisvalid = false where indexrelid = 'test_pkey'::regclass

    Schema 1:
        update pg_index set indisvalid = false where indexrelid = 'classroom_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'course_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'department_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'instructor_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'pre_requiste_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'section_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'section_time_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'student_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'takes_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'time_slot_pkey'::regclass;

    Schema 2:
        update pg_index set indisvalid = false where indexrelid = 'department_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'dependent_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'dept_locations_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'project_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'works_on_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'employee_pkey'::regclass; 

    Schema 3:
        update pg_index set indisvalid = false where indexrelid = 'boat_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'reserves_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'sailors_pkey'::regclass;

    Schema 4:
        update pg_index set indisvalid = false where indexrelid = 'actor_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'director_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'genres_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'movie_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'movie_cast_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'movie_direction_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'movie_genres_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'rating_pkey'::regclass;
        update pg_index set indisvalid = false where indexrelid = 'reviewer_pkey'::regclass;

2 - turn of seq scan if needed

    SET enable_seqscan = OFF;

3 - use materialized view when needed

    Schema 1:
        create MATERIALIZED VIEW CSENstudents as
        select *
        from student
        where department = 'CSEN'

    Schema 2:
        create MATERIALIZED VIEW hasDependants as
        select distinct d.essn
        from employee e, dependent d
        where ssn=essn;

    Schema 3:
        create MATERIALIZED VIEW schema3join as
        select sailors.*, reserves.bid, reserves."day", boat.bname, boat.color
        from sailors
        inner join reserves on sailors.sid = reserves.sid
        inner join boat on boat.bid = reserves.bid